// Mixin qui permet de rendre la taille de typographie fluide

@mixin fluid-type($heading) {
  $min-vw: map-get($breakpoints, sm);       // taille minimum d'écran
  $max-vw: map-get($breakpoints, lg);       // taille maximum d'écran
  $min-font-size: map-get($heading, min);   // taille minimum de police
  $max-font-size: map-get($heading, max);   // taille maximum de police

  // @link https://css-tricks.com/snippets/css/fluid-typography/
  // Calcul du "scaler" :
  // calc([minimum size] + ([maximum size] - [minimum size]) * ((100vw - [minimum viewport width]) / ([maximum viewport width] - [minimum viewport width])));
  // Exemple avec $heading-1 :
  // taille d'écran min    => 36 + (64 - 36) * ((640 - 640) / (1296 - 640))  = 36 + 28 * (0 / 656)   = 36
  // taille d'écran medium => 36 + (64 - 36) * ((960 - 640) / (1296 - 640))  = 36 + 28 * (320 / 656) = 49,66
  // taille d'écran max    => 36 + (64 - 36) * ((1296 - 640) / (1296 - 640)) = 36 + 28 * (656 / 656) = 64

  $scaler: calc( #{ pxToRem( strip-unit( $min-font-size )) } + #{ strip-unit( $max-font-size - $min-font-size ) } * ( ( 100vw - #{$min-vw} ) / #{ strip-unit( $max-vw - $min-vw ) } ) );

  // La fonction CSS clamp() permet de ramener une valeur entre deux bornes inférieure et supérieure. 
  // Cette fonction utilise trois paramètres : une valeur minimale, la valeur à tester et une valeur maximale.

  font-size: clamp( pxToRem( strip-unit( $min-font-size ) ), $scaler, pxToRem( strip-unit( $max-font-size ) ) );
}

// Système de Breakpoint repris de Bootstrap

@mixin bp-up($name, $breakpoints: $breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin bp-down($name, $breakpoints: $breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Alignements 

@mixin align($verticalAlign, $horizontalAlign) {
  display: flex;
  justify-content: $horizontalAlign;
  align-items: $verticalAlign;
}

@mixin maxCol($module: $module) {

  padding-left: map-get($spaces, 's');
  padding-right: map-get($spaces, 's');

  @include bp-up('sm') {    
    box-sizing: content-box;
    max-width: calc( #{ $colMax } * #{ $module } + #{ $gutter } * ( #{ $module } - 1 ));
    margin-left: auto;
    margin-right: auto;
  }
}


%unstyled {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Only display content to screen readers
@mixin sr-only() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px; // Fix for https://github.com/twbs/bootstrap/issues/25686
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}